package com.dream.myliu.liangwarehouse.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.dream.myliu.liangwarehouse.greendao.BrandIntentGoodsEty;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "BRAND_INTENT_GOODS_ETY".
*/
public class BrandIntentGoodsEtyDao extends AbstractDao<BrandIntentGoodsEty, Long> {

    public static final String TABLENAME = "BRAND_INTENT_GOODS_ETY";

    /**
     * Properties of entity BrandIntentGoodsEty.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Description = new Property(0, String.class, "description", false, "DESCRIPTION");
        public final static Property Id = new Property(1, Long.class, "id", false, "ID");
        public final static Property Brand_id = new Property(2, Integer.class, "brand_id", false, "BRAND_ID");
        public final static Property Sale_by = new Property(3, String.class, "sale_by", false, "SALE_BY");
        public final static Property Price = new Property(4, Long.class, "price", false, "PRICE");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property Brand_intent_img_id = new Property(6, Long.class, "brand_intent_img_id", false, "BRAND_INTENT_IMG_ID");
        public final static Property Brand_intent_goods_id = new Property(7, Long.class, "brand_intent_goods_id", true, "BRAND_INTENT_GOODS_ID");
    };

    private DaoSession daoSession;

    private Query<BrandIntentGoodsEty> brandIntentEty_GoodsQuery;

    public BrandIntentGoodsEtyDao(DaoConfig config) {
        super(config);
    }
    
    public BrandIntentGoodsEtyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"BRAND_INTENT_GOODS_ETY\" (" + //
                "\"DESCRIPTION\" TEXT," + // 0: description
                "\"ID\" INTEGER," + // 1: id
                "\"BRAND_ID\" INTEGER," + // 2: brand_id
                "\"SALE_BY\" TEXT," + // 3: sale_by
                "\"PRICE\" INTEGER," + // 4: price
                "\"NAME\" TEXT," + // 5: name
                "\"BRAND_INTENT_IMG_ID\" INTEGER," + // 6: brand_intent_img_id
                "\"BRAND_INTENT_GOODS_ID\" INTEGER PRIMARY KEY );"); // 7: brand_intent_goods_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"BRAND_INTENT_GOODS_ETY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BrandIntentGoodsEty entity) {
        stmt.clearBindings();
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(1, description);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        Integer brand_id = entity.getBrand_id();
        if (brand_id != null) {
            stmt.bindLong(3, brand_id);
        }
 
        String sale_by = entity.getSale_by();
        if (sale_by != null) {
            stmt.bindString(4, sale_by);
        }
 
        Long price = entity.getPrice();
        if (price != null) {
            stmt.bindLong(5, price);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        Long brand_intent_img_id = entity.getBrand_intent_img_id();
        if (brand_intent_img_id != null) {
            stmt.bindLong(7, brand_intent_img_id);
        }
 
        Long brand_intent_goods_id = entity.getBrand_intent_goods_id();
        if (brand_intent_goods_id != null) {
            stmt.bindLong(8, brand_intent_goods_id);
        }
    }

    @Override
    protected void attachEntity(BrandIntentGoodsEty entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7);
    }    

    /** @inheritdoc */
    @Override
    public BrandIntentGoodsEty readEntity(Cursor cursor, int offset) {
        BrandIntentGoodsEty entity = new BrandIntentGoodsEty( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // description
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // brand_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // sale_by
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // price
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6), // brand_intent_img_id
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7) // brand_intent_goods_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BrandIntentGoodsEty entity, int offset) {
        entity.setDescription(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBrand_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setSale_by(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPrice(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBrand_intent_img_id(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
        entity.setBrand_intent_goods_id(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BrandIntentGoodsEty entity, long rowId) {
        entity.setBrand_intent_goods_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BrandIntentGoodsEty entity) {
        if(entity != null) {
            return entity.getBrand_intent_goods_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "goods" to-many relationship of BrandIntentEty. */
    public List<BrandIntentGoodsEty> _queryBrandIntentEty_Goods(Long brand_intent_goods_id) {
        synchronized (this) {
            if (brandIntentEty_GoodsQuery == null) {
                QueryBuilder<BrandIntentGoodsEty> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Brand_intent_goods_id.eq(null));
                brandIntentEty_GoodsQuery = queryBuilder.build();
            }
        }
        Query<BrandIntentGoodsEty> query = brandIntentEty_GoodsQuery.forCurrentThread();
        query.setParameter(0, brand_intent_goods_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getBrandIntentGoodsEtyDao().getAllColumns());
            builder.append(" FROM BRAND_INTENT_GOODS_ETY T");
            builder.append(" LEFT JOIN BRAND_INTENT_GOODS_ETY T0 ON T.\"BRAND_INTENT_GOODS_ID\"=T0.\"BRAND_INTENT_GOODS_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected BrandIntentGoodsEty loadCurrentDeep(Cursor cursor, boolean lock) {
        BrandIntentGoodsEty entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        BrandIntentGoodsEty brandIntentGoodsEty = loadCurrentOther(daoSession.getBrandIntentGoodsEtyDao(), cursor, offset);
        entity.setBrandIntentGoodsEty(brandIntentGoodsEty);

        return entity;    
    }

    public BrandIntentGoodsEty loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<BrandIntentGoodsEty> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<BrandIntentGoodsEty> list = new ArrayList<BrandIntentGoodsEty>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<BrandIntentGoodsEty> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<BrandIntentGoodsEty> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
