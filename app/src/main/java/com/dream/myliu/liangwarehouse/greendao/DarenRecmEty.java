package com.dream.myliu.liangwarehouse.greendao;

import com.dream.myliu.liangwarehouse.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "recomment_daren".
 */
public class DarenRecmEty {

    private String goods_id;
    private String goods_image;
    private String goods_name;
    private String price;
    private String owner_id;
    private String comment_count;
    private String like_count;
    private Integer liked;
    private Long _id_recomment;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DarenRecmEtyDao myDao;

    private DarenPersonDataEty darenPersonDataEty;
    private Long darenPersonDataEty__resolvedKey;


    public DarenRecmEty() {
    }

    public DarenRecmEty(Long _id_recomment) {
        this._id_recomment = _id_recomment;
    }

    public DarenRecmEty(String goods_id, String goods_image, String goods_name, String price, String owner_id, String comment_count, String like_count, Integer liked, Long _id_recomment) {
        this.goods_id = goods_id;
        this.goods_image = goods_image;
        this.goods_name = goods_name;
        this.price = price;
        this.owner_id = owner_id;
        this.comment_count = comment_count;
        this.like_count = like_count;
        this.liked = liked;
        this._id_recomment = _id_recomment;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDarenRecmEtyDao() : null;
    }

    public String getGoods_id() {
        return goods_id;
    }

    public void setGoods_id(String goods_id) {
        this.goods_id = goods_id;
    }

    public String getGoods_image() {
        return goods_image;
    }

    public void setGoods_image(String goods_image) {
        this.goods_image = goods_image;
    }

    public String getGoods_name() {
        return goods_name;
    }

    public void setGoods_name(String goods_name) {
        this.goods_name = goods_name;
    }

    public String getPrice() {
        return price;
    }

    public void setPrice(String price) {
        this.price = price;
    }

    public String getOwner_id() {
        return owner_id;
    }

    public void setOwner_id(String owner_id) {
        this.owner_id = owner_id;
    }

    public String getComment_count() {
        return comment_count;
    }

    public void setComment_count(String comment_count) {
        this.comment_count = comment_count;
    }

    public String getLike_count() {
        return like_count;
    }

    public void setLike_count(String like_count) {
        this.like_count = like_count;
    }

    public Integer getLiked() {
        return liked;
    }

    public void setLiked(Integer liked) {
        this.liked = liked;
    }

    public Long get_id_recomment() {
        return _id_recomment;
    }

    public void set_id_recomment(Long _id_recomment) {
        this._id_recomment = _id_recomment;
    }

    /** To-one relationship, resolved on first access. */
    public DarenPersonDataEty getDarenPersonDataEty() {
        Long __key = this._id_recomment;
        if (darenPersonDataEty__resolvedKey == null || !darenPersonDataEty__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DarenPersonDataEtyDao targetDao = daoSession.getDarenPersonDataEtyDao();
            DarenPersonDataEty darenPersonDataEtyNew = targetDao.load(__key);
            synchronized (this) {
                darenPersonDataEty = darenPersonDataEtyNew;
            	darenPersonDataEty__resolvedKey = __key;
            }
        }
        return darenPersonDataEty;
    }

    public void setDarenPersonDataEty(DarenPersonDataEty darenPersonDataEty) {
        synchronized (this) {
            this.darenPersonDataEty = darenPersonDataEty;
            _id_recomment = darenPersonDataEty == null ? null : darenPersonDataEty.get_id_daren();
            darenPersonDataEty__resolvedKey = _id_recomment;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
