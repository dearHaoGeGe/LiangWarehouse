package com.dream.myliu.liangwarehouse.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.dream.myliu.liangwarehouse.greendao.DarenRecmEty;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "recomment_daren".
*/
public class DarenRecmEtyDao extends AbstractDao<DarenRecmEty, Long> {

    public static final String TABLENAME = "recomment_daren";

    /**
     * Properties of entity DarenRecmEty.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Goods_id = new Property(0, String.class, "goods_id", false, "GOODS_ID");
        public final static Property Goods_image = new Property(1, String.class, "goods_image", false, "GOODS_IMAGE");
        public final static Property Goods_name = new Property(2, String.class, "goods_name", false, "GOODS_NAME");
        public final static Property Price = new Property(3, String.class, "price", false, "PRICE");
        public final static Property Owner_id = new Property(4, String.class, "owner_id", false, "OWNER_ID");
        public final static Property Comment_count = new Property(5, String.class, "comment_count", false, "COMMENT_COUNT");
        public final static Property Like_count = new Property(6, String.class, "like_count", false, "LIKE_COUNT");
        public final static Property Liked = new Property(7, Integer.class, "liked", false, "LIKED");
        public final static Property _id_recomment = new Property(8, Long.class, "_id_recomment", true, "_ID_RECOMMENT");
    };

    private DaoSession daoSession;

    private Query<DarenRecmEty> darenPersonDataEty_GoodsQuery;

    public DarenRecmEtyDao(DaoConfig config) {
        super(config);
    }
    
    public DarenRecmEtyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"recomment_daren\" (" + //
                "\"GOODS_ID\" TEXT," + // 0: goods_id
                "\"GOODS_IMAGE\" TEXT," + // 1: goods_image
                "\"GOODS_NAME\" TEXT," + // 2: goods_name
                "\"PRICE\" TEXT," + // 3: price
                "\"OWNER_ID\" TEXT," + // 4: owner_id
                "\"COMMENT_COUNT\" TEXT," + // 5: comment_count
                "\"LIKE_COUNT\" TEXT," + // 6: like_count
                "\"LIKED\" INTEGER," + // 7: liked
                "\"_ID_RECOMMENT\" INTEGER PRIMARY KEY );"); // 8: _id_recomment
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"recomment_daren\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DarenRecmEty entity) {
        stmt.clearBindings();
 
        String goods_id = entity.getGoods_id();
        if (goods_id != null) {
            stmt.bindString(1, goods_id);
        }
 
        String goods_image = entity.getGoods_image();
        if (goods_image != null) {
            stmt.bindString(2, goods_image);
        }
 
        String goods_name = entity.getGoods_name();
        if (goods_name != null) {
            stmt.bindString(3, goods_name);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(4, price);
        }
 
        String owner_id = entity.getOwner_id();
        if (owner_id != null) {
            stmt.bindString(5, owner_id);
        }
 
        String comment_count = entity.getComment_count();
        if (comment_count != null) {
            stmt.bindString(6, comment_count);
        }
 
        String like_count = entity.getLike_count();
        if (like_count != null) {
            stmt.bindString(7, like_count);
        }
 
        Integer liked = entity.getLiked();
        if (liked != null) {
            stmt.bindLong(8, liked);
        }
 
        Long _id_recomment = entity.get_id_recomment();
        if (_id_recomment != null) {
            stmt.bindLong(9, _id_recomment);
        }
    }

    @Override
    protected void attachEntity(DarenRecmEty entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8);
    }    

    /** @inheritdoc */
    @Override
    public DarenRecmEty readEntity(Cursor cursor, int offset) {
        DarenRecmEty entity = new DarenRecmEty( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // goods_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goods_image
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goods_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // price
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // owner_id
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // comment_count
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // like_count
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // liked
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8) // _id_recomment
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DarenRecmEty entity, int offset) {
        entity.setGoods_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoods_image(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoods_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPrice(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOwner_id(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setComment_count(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLike_count(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLiked(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.set_id_recomment(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DarenRecmEty entity, long rowId) {
        entity.set_id_recomment(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DarenRecmEty entity) {
        if(entity != null) {
            return entity.get_id_recomment();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "goods" to-many relationship of DarenPersonDataEty. */
    public List<DarenRecmEty> _queryDarenPersonDataEty_Goods(Long _id_recomment) {
        synchronized (this) {
            if (darenPersonDataEty_GoodsQuery == null) {
                QueryBuilder<DarenRecmEty> queryBuilder = queryBuilder();
                queryBuilder.where(Properties._id_recomment.eq(null));
                darenPersonDataEty_GoodsQuery = queryBuilder.build();
            }
        }
        Query<DarenRecmEty> query = darenPersonDataEty_GoodsQuery.forCurrentThread();
        query.setParameter(0, _id_recomment);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDarenPersonDataEtyDao().getAllColumns());
            builder.append(" FROM recomment_daren T");
            builder.append(" LEFT JOIN DAREN_PERSON_DATA_ETY T0 ON T.\"_ID_RECOMMENT\"=T0.\"_ID_DAREN\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DarenRecmEty loadCurrentDeep(Cursor cursor, boolean lock) {
        DarenRecmEty entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DarenPersonDataEty darenPersonDataEty = loadCurrentOther(daoSession.getDarenPersonDataEtyDao(), cursor, offset);
        entity.setDarenPersonDataEty(darenPersonDataEty);

        return entity;    
    }

    public DarenRecmEty loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DarenRecmEty> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DarenRecmEty> list = new ArrayList<DarenRecmEty>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DarenRecmEty> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DarenRecmEty> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
