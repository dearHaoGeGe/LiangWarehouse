package com.dream.myliu.liangwarehouse.greendao;

import java.util.List;
import com.dream.myliu.liangwarehouse.greendao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "CATE_ITEMS_ETY".
 */
public class CateItemsEty {

    private Long _id_item_cate;
    private String name;
    private Integer parent_id;
    private String english_name;
    private Integer id;
    private Long cover_id;
    private Long _id_child;
    private CateCoverEty cover;

    public CateCoverEty getCover() {
        return cover;
    }

    public void setCover(CateCoverEty cover) {
        this.cover = cover;
    }

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient CateItemsEtyDao myDao;

    private CateDataEty cateDataEty;
    private Long cateDataEty__resolvedKey;

    private List<CateChildEntity> children;

    public void setChildren(List<CateChildEntity> children) {
        this.children = children;
    }

    public CateItemsEty() {
    }

    public CateItemsEty(Long _id_item_cate) {
        this._id_item_cate = _id_item_cate;
    }

    public CateItemsEty(Long _id_item_cate, String name, Integer parent_id, String english_name, Integer id, Long cover_id, Long _id_child) {
        this._id_item_cate = _id_item_cate;
        this.name = name;
        this.parent_id = parent_id;
        this.english_name = english_name;
        this.id = id;
        this.cover_id = cover_id;
        this._id_child = _id_child;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getCateItemsEtyDao() : null;
    }

    public Long get_id_item_cate() {
        return _id_item_cate;
    }

    public void set_id_item_cate(Long _id_item_cate) {
        this._id_item_cate = _id_item_cate;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public Integer getParent_id() {
        return parent_id;
    }

    public void setParent_id(Integer parent_id) {
        this.parent_id = parent_id;
    }

    public String getEnglish_name() {
        return english_name;
    }

    public void setEnglish_name(String english_name) {
        this.english_name = english_name;
    }

    public Integer getId() {
        return id;
    }

    public void setId(Integer id) {
        this.id = id;
    }

    public Long getCover_id() {
        return cover_id;
    }

    public void setCover_id(Long cover_id) {
        this.cover_id = cover_id;
    }

    public Long get_id_child() {
        return _id_child;
    }

    public void set_id_child(Long _id_child) {
        this._id_child = _id_child;
    }

    /** To-one relationship, resolved on first access. */
    public CateDataEty getCateDataEty() {
        Long __key = this._id_item_cate;
        if (cateDataEty__resolvedKey == null || !cateDataEty__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CateDataEtyDao targetDao = daoSession.getCateDataEtyDao();
            CateDataEty cateDataEtyNew = targetDao.load(__key);
            synchronized (this) {
                cateDataEty = cateDataEtyNew;
            	cateDataEty__resolvedKey = __key;
            }
        }
        return cateDataEty;
    }

    public void setCateDataEty(CateDataEty cateDataEty) {
        synchronized (this) {
            this.cateDataEty = cateDataEty;
            _id_item_cate = cateDataEty == null ? null : cateDataEty.get_id();
            cateDataEty__resolvedKey = _id_item_cate;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<CateChildEntity> getChildren() {
        if (children == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CateChildEntityDao targetDao = daoSession.getCateChildEntityDao();
            List<CateChildEntity> childrenNew = targetDao._queryCateItemsEty_Children(_id_item_cate);
            synchronized (this) {
                if(children == null) {
                    children = childrenNew;
                }
            }
        }
        return children;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetChildren() {
        children = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
