package com.dream.myliu.liangwarehouse.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dream.myliu.liangwarehouse.greendao.GoodsOrderEty;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS_ORDER_ETY".
*/
public class GoodsOrderEtyDao extends AbstractDao<GoodsOrderEty, Long> {

    public static final String TABLENAME = "GOODS_ORDER_ETY";

    /**
     * Properties of entity GoodsOrderEty.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property User_name = new Property(0, String.class, "user_name", false, "USER_NAME");
        public final static Property Good_name = new Property(1, String.class, "good_name", false, "GOOD_NAME");
        public final static Property Url_img = new Property(2, String.class, "url_img", false, "URL_IMG");
        public final static Property _id = new Property(3, Long.class, "_id", true, "_ID");
        public final static Property Counts = new Property(4, Long.class, "counts", false, "COUNTS");
        public final static Property OnePrice = new Property(5, Float.class, "onePrice", false, "ONE_PRICE");
    };


    public GoodsOrderEtyDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsOrderEtyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS_ORDER_ETY\" (" + //
                "\"USER_NAME\" TEXT," + // 0: user_name
                "\"GOOD_NAME\" TEXT," + // 1: good_name
                "\"URL_IMG\" TEXT," + // 2: url_img
                "\"_ID\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 3: _id
                "\"COUNTS\" INTEGER," + // 4: counts
                "\"ONE_PRICE\" REAL);"); // 5: onePrice
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS_ORDER_ETY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, GoodsOrderEty entity) {
        stmt.clearBindings();
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(1, user_name);
        }
 
        String good_name = entity.getGood_name();
        if (good_name != null) {
            stmt.bindString(2, good_name);
        }
 
        String url_img = entity.getUrl_img();
        if (url_img != null) {
            stmt.bindString(3, url_img);
        }
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(4, _id);
        }
 
        Long counts = entity.getCounts();
        if (counts != null) {
            stmt.bindLong(5, counts);
        }
 
        Float onePrice = entity.getOnePrice();
        if (onePrice != null) {
            stmt.bindDouble(6, onePrice);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3);
    }    

    /** @inheritdoc */
    @Override
    public GoodsOrderEty readEntity(Cursor cursor, int offset) {
        GoodsOrderEty entity = new GoodsOrderEty( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // user_name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // good_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // url_img
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3), // _id
            cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4), // counts
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5) // onePrice
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, GoodsOrderEty entity, int offset) {
        entity.setUser_name(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGood_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUrl_img(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.set_id(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
        entity.setCounts(cursor.isNull(offset + 4) ? null : cursor.getLong(offset + 4));
        entity.setOnePrice(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(GoodsOrderEty entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(GoodsOrderEty entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
