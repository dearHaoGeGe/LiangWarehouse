package com.dream.myliu.liangwarehouse.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dream.myliu.liangwarehouse.greendao.DarenData;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DAREN_DATA".
*/
public class DarenDataDao extends AbstractDao<DarenData, Long> {

    public static final String TABLENAME = "DAREN_DATA";

    /**
     * Properties of entity DarenData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_ID");
        public final static Property User_id = new Property(1, String.class, "user_id", false, "USER_ID");
        public final static Property User_name = new Property(2, String.class, "user_name", false, "USER_NAME");
        public final static Property Is_daren = new Property(3, String.class, "is_daren", false, "IS_DAREN");
        public final static Property User_image = new Property(4, String.class, "user_image", false, "USER_IMAGE");
        public final static Property User_desc = new Property(5, String.class, "user_desc", false, "USER_DESC");
    };


    public DarenDataDao(DaoConfig config) {
        super(config);
    }
    
    public DarenDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DAREN_DATA\" (" + //
                "\"_ID\" INTEGER PRIMARY KEY UNIQUE ," + // 0: _id
                "\"USER_ID\" TEXT," + // 1: user_id
                "\"USER_NAME\" TEXT," + // 2: user_name
                "\"IS_DAREN\" TEXT," + // 3: is_daren
                "\"USER_IMAGE\" TEXT," + // 4: user_image
                "\"USER_DESC\" TEXT);"); // 5: user_desc
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DAREN_DATA\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, DarenData entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        String user_id = entity.getUser_id();
        if (user_id != null) {
            stmt.bindString(2, user_id);
        }
 
        String user_name = entity.getUser_name();
        if (user_name != null) {
            stmt.bindString(3, user_name);
        }
 
        String is_daren = entity.getIs_daren();
        if (is_daren != null) {
            stmt.bindString(4, is_daren);
        }
 
        String user_image = entity.getUser_image();
        if (user_image != null) {
            stmt.bindString(5, user_image);
        }
 
        String user_desc = entity.getUser_desc();
        if (user_desc != null) {
            stmt.bindString(6, user_desc);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public DarenData readEntity(Cursor cursor, int offset) {
        DarenData entity = new DarenData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // user_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // user_name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // is_daren
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // user_image
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // user_desc
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, DarenData entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUser_id(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUser_name(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIs_daren(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUser_image(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUser_desc(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(DarenData entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(DarenData entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
