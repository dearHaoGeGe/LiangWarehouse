package com.dream.myliu.liangwarehouse.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dream.myliu.liangwarehouse.greendao.CateDetailEty;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATE_DETAIL_ETY".
*/
public class CateDetailEtyDao extends AbstractDao<CateDetailEty, Void> {

    public static final String TABLENAME = "CATE_DETAIL_ETY";

    /**
     * Properties of entity CateDetailEty.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Brand_id = new Property(0, String.class, "brand_id", false, "BRAND_ID");
        public final static Property Brand_name = new Property(1, String.class, "brand_name", false, "BRAND_NAME");
        public final static Property Brand_desc = new Property(2, String.class, "brand_desc", false, "BRAND_DESC");
        public final static Property Brand_logo = new Property(3, String.class, "brand_logo", false, "BRAND_LOGO");
    };


    public CateDetailEtyDao(DaoConfig config) {
        super(config);
    }
    
    public CateDetailEtyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATE_DETAIL_ETY\" (" + //
                "\"BRAND_ID\" TEXT," + // 0: brand_id
                "\"BRAND_NAME\" TEXT," + // 1: brand_name
                "\"BRAND_DESC\" TEXT," + // 2: brand_desc
                "\"BRAND_LOGO\" TEXT);"); // 3: brand_logo
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATE_DETAIL_ETY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CateDetailEty entity) {
        stmt.clearBindings();
 
        String brand_id = entity.getBrand_id();
        if (brand_id != null) {
            stmt.bindString(1, brand_id);
        }
 
        String brand_name = entity.getBrand_name();
        if (brand_name != null) {
            stmt.bindString(2, brand_name);
        }
 
        String brand_desc = entity.getBrand_desc();
        if (brand_desc != null) {
            stmt.bindString(3, brand_desc);
        }
 
        String brand_logo = entity.getBrand_logo();
        if (brand_logo != null) {
            stmt.bindString(4, brand_logo);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CateDetailEty readEntity(Cursor cursor, int offset) {
        CateDetailEty entity = new CateDetailEty( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // brand_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // brand_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // brand_desc
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // brand_logo
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CateDetailEty entity, int offset) {
        entity.setBrand_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setBrand_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBrand_desc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrand_logo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CateDetailEty entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CateDetailEty entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
