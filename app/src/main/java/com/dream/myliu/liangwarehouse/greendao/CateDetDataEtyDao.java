package com.dream.myliu.liangwarehouse.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.dream.myliu.liangwarehouse.greendao.CateDetDataEty;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATE_DET_DATA_ETY".
*/
public class CateDetDataEtyDao extends AbstractDao<CateDetDataEty, Void> {

    public static final String TABLENAME = "CATE_DET_DATA_ETY";

    /**
     * Properties of entity CateDetDataEty.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Goods_id = new Property(0, String.class, "goods_id", false, "GOODS_ID");
        public final static Property Goods_image = new Property(1, String.class, "goods_image", false, "GOODS_IMAGE");
        public final static Property Goods_url = new Property(2, String.class, "goods_url", false, "GOODS_URL");
        public final static Property Goods_name = new Property(3, String.class, "goods_name", false, "GOODS_NAME");
        public final static Property Goods_desc = new Property(4, String.class, "goods_desc", false, "GOODS_DESC");
        public final static Property Price = new Property(5, String.class, "price", false, "PRICE");
        public final static Property Comment_count = new Property(6, String.class, "comment_count", false, "COMMENT_COUNT");
        public final static Property Like_count = new Property(7, String.class, "like_count", false, "LIKE_COUNT");
        public final static Property Liked = new Property(8, Integer.class, "liked", false, "LIKED");
        public final static Property Discount_price = new Property(9, String.class, "discount_price", false, "DISCOUNT_PRICE");
        public final static Property Coupon_flag = new Property(10, Boolean.class, "coupon_flag", false, "COUPON_FLAG");
        public final static Property Owner_id = new Property(11, Integer.class, "owner_id", false, "OWNER_ID");
        public final static Property Owner_name = new Property(12, String.class, "owner_name", false, "OWNER_NAME");
        public final static Property Owner_desc = new Property(13, String.class, "owner_desc", false, "OWNER_DESC");
        public final static Property Is_daren = new Property(14, String.class, "is_daren", false, "IS_DAREN");
        public final static Property Owner_image = new Property(15, String.class, "owner_image", false, "OWNER_IMAGE");
        public final static Property Rec_reason = new Property(16, String.class, "rec_reason", false, "REC_REASON");
        public final static Property Servicer_id = new Property(17, Integer.class, "servicer_id", false, "SERVICER_ID");
        public final static Property Category_id = new Property(18, String.class, "category_id", false, "CATEGORY_ID");
        public final static Property Able_buy_note = new Property(19, String.class, "able_buy_note", false, "ABLE_BUY_NOTE");
        public final static Property Good_brand_id = new Property(20, Long.class, "good_brand_id", false, "GOOD_BRAND_ID");
        public final static Property Good_guide_id = new Property(21, Long.class, "good_guide_id", false, "GOOD_GUIDE_ID");
    };


    public CateDetDataEtyDao(DaoConfig config) {
        super(config);
    }
    
    public CateDetDataEtyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATE_DET_DATA_ETY\" (" + //
                "\"GOODS_ID\" TEXT," + // 0: goods_id
                "\"GOODS_IMAGE\" TEXT," + // 1: goods_image
                "\"GOODS_URL\" TEXT," + // 2: goods_url
                "\"GOODS_NAME\" TEXT," + // 3: goods_name
                "\"GOODS_DESC\" TEXT," + // 4: goods_desc
                "\"PRICE\" TEXT," + // 5: price
                "\"COMMENT_COUNT\" TEXT," + // 6: comment_count
                "\"LIKE_COUNT\" TEXT," + // 7: like_count
                "\"LIKED\" INTEGER," + // 8: liked
                "\"DISCOUNT_PRICE\" TEXT," + // 9: discount_price
                "\"COUPON_FLAG\" INTEGER," + // 10: coupon_flag
                "\"OWNER_ID\" INTEGER," + // 11: owner_id
                "\"OWNER_NAME\" TEXT," + // 12: owner_name
                "\"OWNER_DESC\" TEXT," + // 13: owner_desc
                "\"IS_DAREN\" TEXT," + // 14: is_daren
                "\"OWNER_IMAGE\" TEXT," + // 15: owner_image
                "\"REC_REASON\" TEXT," + // 16: rec_reason
                "\"SERVICER_ID\" INTEGER," + // 17: servicer_id
                "\"CATEGORY_ID\" TEXT," + // 18: category_id
                "\"ABLE_BUY_NOTE\" TEXT," + // 19: able_buy_note
                "\"GOOD_BRAND_ID\" INTEGER," + // 20: good_brand_id
                "\"GOOD_GUIDE_ID\" INTEGER);"); // 21: good_guide_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATE_DET_DATA_ETY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CateDetDataEty entity) {
        stmt.clearBindings();
 
        String goods_id = entity.getGoods_id();
        if (goods_id != null) {
            stmt.bindString(1, goods_id);
        }
 
        String goods_image = entity.getGoods_image();
        if (goods_image != null) {
            stmt.bindString(2, goods_image);
        }
 
        String goods_url = entity.getGoods_url();
        if (goods_url != null) {
            stmt.bindString(3, goods_url);
        }
 
        String goods_name = entity.getGoods_name();
        if (goods_name != null) {
            stmt.bindString(4, goods_name);
        }
 
        String goods_desc = entity.getGoods_desc();
        if (goods_desc != null) {
            stmt.bindString(5, goods_desc);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(6, price);
        }
 
        String comment_count = entity.getComment_count();
        if (comment_count != null) {
            stmt.bindString(7, comment_count);
        }
 
        String like_count = entity.getLike_count();
        if (like_count != null) {
            stmt.bindString(8, like_count);
        }
 
        Integer liked = entity.getLiked();
        if (liked != null) {
            stmt.bindLong(9, liked);
        }
 
        String discount_price = entity.getDiscount_price();
        if (discount_price != null) {
            stmt.bindString(10, discount_price);
        }
 
        Boolean coupon_flag = entity.getCoupon_flag();
        if (coupon_flag != null) {
            stmt.bindLong(11, coupon_flag ? 1L: 0L);
        }
 
        Integer owner_id = entity.getOwner_id();
        if (owner_id != null) {
            stmt.bindLong(12, owner_id);
        }
 
        String owner_name = entity.getOwner_name();
        if (owner_name != null) {
            stmt.bindString(13, owner_name);
        }
 
        String owner_desc = entity.getOwner_desc();
        if (owner_desc != null) {
            stmt.bindString(14, owner_desc);
        }
 
        String is_daren = entity.getIs_daren();
        if (is_daren != null) {
            stmt.bindString(15, is_daren);
        }
 
        String owner_image = entity.getOwner_image();
        if (owner_image != null) {
            stmt.bindString(16, owner_image);
        }
 
        String rec_reason = entity.getRec_reason();
        if (rec_reason != null) {
            stmt.bindString(17, rec_reason);
        }
 
        Integer servicer_id = entity.getServicer_id();
        if (servicer_id != null) {
            stmt.bindLong(18, servicer_id);
        }
 
        String category_id = entity.getCategory_id();
        if (category_id != null) {
            stmt.bindString(19, category_id);
        }
 
        String able_buy_note = entity.getAble_buy_note();
        if (able_buy_note != null) {
            stmt.bindString(20, able_buy_note);
        }
 
        Long good_brand_id = entity.getGood_brand_id();
        if (good_brand_id != null) {
            stmt.bindLong(21, good_brand_id);
        }
 
        Long good_guide_id = entity.getGood_guide_id();
        if (good_guide_id != null) {
            stmt.bindLong(22, good_guide_id);
        }
    }

    /** @inheritdoc */
    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    /** @inheritdoc */
    @Override
    public CateDetDataEty readEntity(Cursor cursor, int offset) {
        CateDetDataEty entity = new CateDetDataEty( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // goods_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goods_image
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goods_url
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // goods_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // goods_desc
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // price
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // comment_count
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // like_count
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // liked
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // discount_price
            cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0, // coupon_flag
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // owner_id
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // owner_name
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // owner_desc
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // is_daren
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // owner_image
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16), // rec_reason
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // servicer_id
            cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18), // category_id
            cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // able_buy_note
            cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20), // good_brand_id
            cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21) // good_guide_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CateDetDataEty entity, int offset) {
        entity.setGoods_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setGoods_image(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoods_url(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setGoods_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setGoods_desc(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrice(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setComment_count(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLike_count(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLiked(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setDiscount_price(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCoupon_flag(cursor.isNull(offset + 10) ? null : cursor.getShort(offset + 10) != 0);
        entity.setOwner_id(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setOwner_name(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOwner_desc(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setIs_daren(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setOwner_image(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setRec_reason(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
        entity.setServicer_id(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setCategory_id(cursor.isNull(offset + 18) ? null : cursor.getString(offset + 18));
        entity.setAble_buy_note(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setGood_brand_id(cursor.isNull(offset + 20) ? null : cursor.getLong(offset + 20));
        entity.setGood_guide_id(cursor.isNull(offset + 21) ? null : cursor.getLong(offset + 21));
     }
    
    /** @inheritdoc */
    @Override
    protected Void updateKeyAfterInsert(CateDetDataEty entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    /** @inheritdoc */
    @Override
    public Void getKey(CateDetDataEty entity) {
        return null;
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
