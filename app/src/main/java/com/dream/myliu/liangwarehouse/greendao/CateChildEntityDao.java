package com.dream.myliu.liangwarehouse.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.dream.myliu.liangwarehouse.greendao.CateChildEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATE_CHILD_ENTITY".
*/
public class CateChildEntityDao extends AbstractDao<CateChildEntity, Long> {

    public static final String TABLENAME = "CATE_CHILD_ENTITY";

    /**
     * Properties of entity CateChildEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id_child = new Property(0, Long.class, "_id_child", true, "_ID_CHILD");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Parent_id = new Property(3, String.class, "parent_id", false, "PARENT_ID");
        public final static Property Id = new Property(4, Integer.class, "id", false, "ID");
    };

    private DaoSession daoSession;

    private Query<CateChildEntity> cateItemsEty_ChildrenQuery;

    public CateChildEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CateChildEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATE_CHILD_ENTITY\" (" + //
                "\"_ID_CHILD\" INTEGER PRIMARY KEY ," + // 0: _id_child
                "\"CODE\" TEXT," + // 1: code
                "\"NAME\" TEXT," + // 2: name
                "\"PARENT_ID\" TEXT," + // 3: parent_id
                "\"ID\" INTEGER);"); // 4: id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATE_CHILD_ENTITY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CateChildEntity entity) {
        stmt.clearBindings();
 
        Long _id_child = entity.get_id_child();
        if (_id_child != null) {
            stmt.bindLong(1, _id_child);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindString(4, parent_id);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
    }

    @Override
    protected void attachEntity(CateChildEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CateChildEntity readEntity(Cursor cursor, int offset) {
        CateChildEntity entity = new CateChildEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id_child
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // parent_id
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4) // id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CateChildEntity entity, int offset) {
        entity.set_id_child(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParent_id(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CateChildEntity entity, long rowId) {
        entity.set_id_child(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CateChildEntity entity) {
        if(entity != null) {
            return entity.get_id_child();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "children" to-many relationship of CateItemsEty. */
    public List<CateChildEntity> _queryCateItemsEty_Children(Long _id_child) {
        synchronized (this) {
            if (cateItemsEty_ChildrenQuery == null) {
                QueryBuilder<CateChildEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties._id_child.eq(null));
                cateItemsEty_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<CateChildEntity> query = cateItemsEty_ChildrenQuery.forCurrentThread();
        query.setParameter(0, _id_child);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCateItemsEtyDao().getAllColumns());
            builder.append(" FROM CATE_CHILD_ENTITY T");
            builder.append(" LEFT JOIN CATE_ITEMS_ETY T0 ON T.\"_ID_CHILD\"=T0.\"_ID_ITEM_CATE\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CateChildEntity loadCurrentDeep(Cursor cursor, boolean lock) {
        CateChildEntity entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CateItemsEty cateItemsEty = loadCurrentOther(daoSession.getCateItemsEtyDao(), cursor, offset);
        entity.setCateItemsEty(cateItemsEty);

        return entity;    
    }

    public CateChildEntity loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CateChildEntity> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CateChildEntity> list = new ArrayList<CateChildEntity>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CateChildEntity> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CateChildEntity> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
