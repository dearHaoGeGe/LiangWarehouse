package com.dream.myliu.liangwarehouse.greendao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.dream.myliu.liangwarehouse.greendao.CateItemsEty;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CATE_ITEMS_ETY".
*/
public class CateItemsEtyDao extends AbstractDao<CateItemsEty, Long> {

    public static final String TABLENAME = "CATE_ITEMS_ETY";

    /**
     * Properties of entity CateItemsEty.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property _id_item_cate = new Property(0, Long.class, "_id_item_cate", true, "_ID_ITEM_CATE");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Parent_id = new Property(2, Integer.class, "parent_id", false, "PARENT_ID");
        public final static Property English_name = new Property(3, String.class, "english_name", false, "ENGLISH_NAME");
        public final static Property Id = new Property(4, Integer.class, "id", false, "ID");
        public final static Property Cover_id = new Property(5, Long.class, "cover_id", false, "COVER_ID");
        public final static Property _id_child = new Property(6, Long.class, "_id_child", false, "_ID_CHILD");
    };

    private DaoSession daoSession;

    private Query<CateItemsEty> cateDataEty_ItemsQuery;

    public CateItemsEtyDao(DaoConfig config) {
        super(config);
    }
    
    public CateItemsEtyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CATE_ITEMS_ETY\" (" + //
                "\"_ID_ITEM_CATE\" INTEGER PRIMARY KEY ," + // 0: _id_item_cate
                "\"NAME\" TEXT," + // 1: name
                "\"PARENT_ID\" INTEGER," + // 2: parent_id
                "\"ENGLISH_NAME\" TEXT," + // 3: english_name
                "\"ID\" INTEGER," + // 4: id
                "\"COVER_ID\" INTEGER," + // 5: cover_id
                "\"_ID_CHILD\" INTEGER);"); // 6: _id_child
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CATE_ITEMS_ETY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, CateItemsEty entity) {
        stmt.clearBindings();
 
        Long _id_item_cate = entity.get_id_item_cate();
        if (_id_item_cate != null) {
            stmt.bindLong(1, _id_item_cate);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        Integer parent_id = entity.getParent_id();
        if (parent_id != null) {
            stmt.bindLong(3, parent_id);
        }
 
        String english_name = entity.getEnglish_name();
        if (english_name != null) {
            stmt.bindString(4, english_name);
        }
 
        Integer id = entity.getId();
        if (id != null) {
            stmt.bindLong(5, id);
        }
 
        Long cover_id = entity.getCover_id();
        if (cover_id != null) {
            stmt.bindLong(6, cover_id);
        }
 
        Long _id_child = entity.get_id_child();
        if (_id_child != null) {
            stmt.bindLong(7, _id_child);
        }
    }

    @Override
    protected void attachEntity(CateItemsEty entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public CateItemsEty readEntity(Cursor cursor, int offset) {
        CateItemsEty entity = new CateItemsEty( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id_item_cate
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // parent_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // english_name
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // id
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // cover_id
            cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6) // _id_child
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, CateItemsEty entity, int offset) {
        entity.set_id_item_cate(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setParent_id(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEnglish_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCover_id(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.set_id_child(cursor.isNull(offset + 6) ? null : cursor.getLong(offset + 6));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(CateItemsEty entity, long rowId) {
        entity.set_id_item_cate(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(CateItemsEty entity) {
        if(entity != null) {
            return entity.get_id_item_cate();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "items" to-many relationship of CateDataEty. */
    public List<CateItemsEty> _queryCateDataEty_Items(Long _id_item_cate) {
        synchronized (this) {
            if (cateDataEty_ItemsQuery == null) {
                QueryBuilder<CateItemsEty> queryBuilder = queryBuilder();
                queryBuilder.where(Properties._id_item_cate.eq(null));
                cateDataEty_ItemsQuery = queryBuilder.build();
            }
        }
        Query<CateItemsEty> query = cateDataEty_ItemsQuery.forCurrentThread();
        query.setParameter(0, _id_item_cate);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCateDataEtyDao().getAllColumns());
            builder.append(" FROM CATE_ITEMS_ETY T");
            builder.append(" LEFT JOIN CATE_DATA_ETY T0 ON T.\"_ID_ITEM_CATE\"=T0.\"_ID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected CateItemsEty loadCurrentDeep(Cursor cursor, boolean lock) {
        CateItemsEty entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CateDataEty cateDataEty = loadCurrentOther(daoSession.getCateDataEtyDao(), cursor, offset);
        entity.setCateDataEty(cateDataEty);

        return entity;    
    }

    public CateItemsEty loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<CateItemsEty> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<CateItemsEty> list = new ArrayList<CateItemsEty>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<CateItemsEty> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<CateItemsEty> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
